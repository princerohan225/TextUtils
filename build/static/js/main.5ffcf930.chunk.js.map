{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","HomeText","role","aria-checked","onClick","togglemode","htmlFor","modetext","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","settext","style","color","Heading","onChange","event","target","value","rows","placeholder","new_text","toUpperCase","showAlert","low_text","toLowerCase","text_length","length","copy_text","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","Alert","word","alert","charAt","slice","msg","defaultProps","AboutText","App","Mode","setMode","_useState3","_useState4","ModeText","setModeText","_useState5","_useState6","setAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.5ffcf930.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport React from 'react'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">{props.HomeText}</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to='/About'>{props.AboutText}</Link>\r\n                            </li> */}\r\n                            {/* <li className=\"nav-item dropdown\">\r\n                                <a className=\"nav-link dropdown-toggle\" href=\"/\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                                    Dropdown\r\n                                </a>\r\n                                <ul className=\"dropdown-menu\">\r\n                                    <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n                                    <li><hr className=\"dropdown-divider\"/></li>\r\n                                    <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n                                </ul>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link disabled\">Disabled</a>\r\n                            </li> */}\r\n                        </ul>\r\n\r\n                        {/* <form className=\"d-flex\" role=\"search\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-light\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n\r\n                        <div className={`form-check form-switch text-${props.mode !=='dark' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" aria-checked='false' onClick={props.togglemode} />\r\n\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">{props.modetext}</label>\r\n\r\n                            {/* <p className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">{props.modetext}</p> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    HomeText: PropTypes.string,\r\n    AboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'TextUtils',\r\n    HomeText: 'Home',\r\n    AboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, settext] = useState('');\r\n    // const [time,setTime]=useState('')\r\n\r\n    const handleUpCase = () => {\r\n        let new_text = text.toUpperCase();\r\n        // console.log(new_text)\r\n        settext(new_text)\r\n        if (props.mode !== 'dark') {\r\n            props.showAlert('Converted to UpperCase', 'success')\r\n\r\n        }\r\n        else {\r\n            props.showAlert('Converted to UpperCase', 'dark')\r\n        }\r\n    }\r\n\r\n    const handlelowercase = () => {\r\n        let low_text = text.toLowerCase();\r\n        // console.log(low_text)\r\n        settext(low_text)\r\n        if (props.mode !== 'dark') {\r\n            props.showAlert('Converted to LowerCase', 'success')\r\n\r\n        }\r\n        else {\r\n            props.showAlert('Converted to LowerCase', 'dark')\r\n        }\r\n    }\r\n\r\n    const handleLength = () => {\r\n        let text_length = text.length;\r\n        // console.log(text_length);\r\n        settext('Number of Characters: ' + text_length)\r\n        if (props.mode !== 'dark') {\r\n            props.showAlert(`Total Character ${text_length}`, 'success')\r\n\r\n        }\r\n        else {\r\n            props.showAlert(`Total Character ${text_length}`, 'dark')\r\n        }\r\n    }\r\n\r\n    const handleCopyText = () => {\r\n        let copy_text = document.getElementById('mybtn');\r\n        copy_text.select();\r\n        copy_text.setSelectionRange(0, 99999);\r\n        navigator.clipboard.writeText(copy_text.value);\r\n        if (props.mode !== 'dark') {\r\n            props.showAlert('Copy to Clipboard', 'success')\r\n\r\n        }\r\n        else {\r\n            props.showAlert('Copy to Clipboard', 'dark')\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        let clear_text = '';\r\n        settext(clear_text);\r\n        if (props.mode !== 'dark') {\r\n            props.showAlert('Text is Clear', 'success')\r\n\r\n        }\r\n        else {\r\n            props.showAlert('Text is Clear', 'dark')\r\n        }\r\n    }\r\n\r\n    const handleonChange = (event) => {\r\n        // console.log('On Change')\r\n        settext(event.target.value)\r\n    }\r\n\r\n    // const watch = () => {\r\n       \r\n\r\n    //     let a;\r\n    //     let date;\r\n    //     let time;\r\n    //     const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\n    //     a = new Date();\r\n    //     date = a.toLocaleDateString(undefined, options);\r\n    //     time = a.getHours() + \":\" + a.getMinutes() + \":\" + a.getSeconds()\r\n    //     // console.log(time)\r\n    //     document.getElementById('Time').innerHTML = time + \" on\\t\" + date\r\n\r\n    // }\r\n    // setInterval(watch, 1000);\r\n    // // clearInterval(x)\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n\r\n            <div className='container my-3' style={{ color: props.mode !== 'dark' ? 'black' : 'white' }}>\r\n\r\n                {/* <p> The Current Time is: <strong><span id='Time'></span></strong></p> */}\r\n                \r\n\r\n                <p>{props.Heading}</p>\r\n\r\n                <div className=\"mb-3\">\r\n\r\n                    <textarea className=\"form-control my-2\" onChange={handleonChange} id=\"mybtn\" rows=\"5\" value={text} placeholder='Enter your Text Here.'></textarea>\r\n\r\n                    <button className={`${props.mode !== 'dark' ? 'btn btn-primary' : 'btn btn-dark'} mx-1 my-1`} onClick={handleUpCase}>Upper Case</button>\r\n\r\n                    <button className={`${props.mode !== 'dark' ? 'btn btn-primary' : 'btn btn-dark'}`} onClick={handlelowercase}>Lower Case</button>\r\n\r\n                    <button className={`${props.mode !== 'dark' ? 'btn btn-primary' : 'btn btn-dark'} mx-1`} onClick={handleLength}>Character Length</button>\r\n\r\n                    <button className={`${props.mode !== 'dark' ? 'btn btn-primary' : 'btn btn-dark'}`} onClick={handleCopyText}>Copy Text</button>\r\n\r\n                    <button className={`${props.mode !== 'dark' ? 'btn btn-primary' : 'btn btn-dark'} mx-1`} onClick={handleClear}>Clear Text</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='container' style={{ color: props.mode !== 'dark' ? 'black' : 'white' }}>\r\n                <h2>Text Summary...</h2>\r\n                <p>{text.split(' ').length} words and {text.length} character.</p>\r\n\r\n                <p>{0.008 * text.split(' ').length}Minutes Read.</p>\r\n\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : 'Enter Something Text to above to Preview.'}</p>\r\n\r\n            </div>\r\n            <hr style={{ color: props.mode !== 'dark' ? 'black' : 'white' }}></hr>\r\n\r\n\r\n        </>\r\n    );\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        let lower = word.charAt(0).toUpperCase() + word.slice(1);\r\n        return lower;\r\n    }\r\n\r\n    return (\r\n\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n            \r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n","// import './App.css';\n// import About from \"./component/About\";\nimport Navbar from \"./component/Navbar\";\nimport TextForm from \"./component/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./component/Alert\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState(\"light\");\n  const [ModeText, setModeText] = useState(\"Enable DarkMode\");\n  const [alert, setAlert] = useState(\"\");\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  const toggleMode = () => {\n    if (Mode !== \"dark\") {\n      // console.log(mode);\n      setMode(\"dark\");\n      setModeText(\"Enable LightMode\");\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark Mode Enabled\", \"dark\");\n\n    } else {\n      // console.log(mode);\n      setMode(\"light\");\n      setModeText(\"Enable DarkMode\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Enabled\", \"success\");\n    }\n    \n  };\n\n  return (\n    <>\n      <Navbar\n        title={\"TextUtils\"}\n        HomeText={\"Home\"}\n        AboutText={\"About\"}\n        mode={Mode}\n        modetext={ModeText}\n        togglemode={toggleMode}\n      />\n\n      <Alert alert={alert} />\n\n      {/* <About mode={Mode} /> */}\n\n      <TextForm\n        showAlert={showAlert}\n        Heading=\"Enter your Text to Analyze.\"\n        mode={Mode}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}